#!/usr/bin/env bash

# global definitions
TRUE=0
FALSE=1
DEBUG=${FALSE}
ERROR=1
SUCCESS=0
PARAMS=$SUCCESS

function check_requirement {
    cmd=$1
    command -v "${cmd}" >/dev/null 2>&1 || {
        echo "${cmd} not found, aborting"
        exit $ERROR
    }
}

function help {
    echo "$0 OPTIONS"
    echo
    echo "OPTIONS:"
    echo "   --host <awx host>"
    echo "   --user <awx user>"
    echo "   --pass <awx pass>"
    echo "   --repo <awx project repository url>"
    echo "  [--branch <awx project repository branch>]"
    echo "  [--debug]"
}

function debug {
    if [ ${DEBUG} -eq ${TRUE} ]; then
        echo "$@"
    fi
}

check_requirement tower-cli
check_requirement jq

# parse options (https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        --host)
            HOST="$2"
            shift # past argument
            shift # past value
            ;;
        --user)
            _USER="$2"
            shift # past argument
            shift # past value
            ;;
        --pass)
            _PASS="$2"
            shift # past argument
            shift # past value
            ;;
        --repo)
            REPO="$2"
            shift # past argument
            shift # past value
            ;;
        --branch)
            BRANCH="$2"
            shift # past argument
            shift # past value
            ;;
        --from)
            FROM="$2"
            shift # past argument
            shift # past value
            ;;
        --to)
            TO="$2"
            shift # past argument
            shift # past value
            ;;
        --help)
            help
            exit ${SUCCESS}
            ;;
        --debug)
            DEBUG="${TRUE}"
            shift # past argument
            ;;
        *)  # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# validate options
if [ -z "${HOST}" ]; then
    echo "--host <awx host> option is required"
    PARAMS="${ERROR}"
fi
if [ -z "${_USER}" ]; then
    echo "--user <awx api user> option is required"
    PARAMS="${ERROR}"
fi
if [ -z "${_PASS}" ]; then
    echo "--pass <awx api password> option is required"
    PARAMS="${ERROR}"
fi
if [ -z "${REPO}" ]; then
    echo "--repo <project reposority url> option is required"
    PARAMS="${ERROR}"
fi
if [ "${PARAMS}" == "${ERROR}" ]; then
    PARAMS="${ERROR}"
fi

# set defaults
if [ -z "${BRANCH}" ]; then
    BRANCH="master"
fi
if [ -z "${FROM}" ]; then
    CI_COMMIT_BEFORE_SHA_DEFAULT="$(git rev-list --max-count=1 HEAD)"
    FROM="${CI_COMMIT_BEFORE_SHA:-$CI_COMMIT_BEFORE_SHA_DEFAULT}"
    debug "CI_COMMIT_BEFORE_SHA=${FROM}"
fi
if [ -z "${TO}" ]; then
    CI_COMMIT_SHA_DEFAULT="$(git rev-list --max-count=2 HEAD | tail -1)"
    TO="${CI_COMMIT_SHA:-$CI_COMMIT_SHA_DEFAULT}"
    debug "CI_COMMIT_SHA=${TO}"
fi

if [ "${PARAMS}" -eq "${ERROR}" ]; then
    echo
    help
    exit ${PARAMS}
fi

# shellcheck disable=SC2069
tower-cli config host "${HOST}" 2>&1 >/dev/null
# shellcheck disable=SC2069
tower-cli config username "${_USER}" 2>&1 >/dev/null
# shellcheck disable=SC2069
tower-cli config password "${_PASS}" 2>&1 >/dev/null
# shellcheck disable=SC2069
tower-cli config format json 2>&1 >/dev/null
# set defaults

# retrieve awx project ids
if PRJ_JSON=$(tower-cli project list --scm-url "${REPO}" --scm-branch "${BRANCH}"); then

    PRJS=$(echo "${PRJ_JSON}" | jq -cr '.results')

    if [ -z "${PRJS}" ]; then

        echo "no projects found for repository ${REPO}"

    else

        _iter_jq() {
            echo "${1}" | jq -r '.[]| @base64'
        }

        for PRJB64 in $(_iter_jq "${PRJS}"); do

            _jq() {
                echo ${1} | base64 --decode | jq -r ${2}
            }

            PRJ_ID=$(_jq "${PRJB64}" ".id")
            PRJ_NAME=$(_jq "${PRJB64}" ".name")
            PRJ_ORG=$(_jq "${PRJB64}" ".organization")

            # retrieve awx inventory source ids
            INS_DATA=$(tower-cli inventory_source list --source-project "${PRJ_NAME}" | jq ".results")

            # retrieve diff
            DIFF=$(git diff --name-only ${FROM} ${TO})

            # get ids for inventory sources with source paths listed in git diff
            INS_IDS=()
            debug "scanning diff:"
            debug "${DIFF}"
            for file in $DIFF; do
                # show off some impressive jmespath fu
                FILE_INS_IDS=$(echo $INS_DATA |
                                jq 'map(.source_path as $sp | select("'$file'" | startswith($sp)))' |
                                jq -r 'map(.id) | .[]'
                            )
                echo "$FILE_INS_IDS"
                for id in $(_iter_jq ${$FILE_INS_IDS}); do
                    if [[ ! "${INS_IDS[@]}" =~ "${id}" ]]; then
                        echo "${file} match found for inventory sources ${FILE_INS_IDS}"
                        INS_IDS+=($id)
                    fi
                done
            done

            echo "updating inventories for ids ${INS_IDS[@]}"

            for INS_ID in "${INS_IDS[@]}"; do

                # launch inventory update job
                debug updating inventory source ${INS_ID}

                if INS_UPDATE=$(tower-cli inventory_source update --wait ${INS_ID}); then

                    echo "updated inventory id ${INS_ID}"

                else

                    echo "unable to update inventory source ${INS_ID}"
                    echo "${INS_UPDATE}"
                    exit ${ERROR}

                fi

            done

        done

    fi

else

    echo "unable to query project list from ${HOST}"
    exit ${ERROR}

fi

exit ${SUCCESS}
